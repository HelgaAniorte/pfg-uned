/*
 * Copyright (C) 2017 Alberto Bausá Cano
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package app.view_controller.datospaciente;

import app.common.DataBase;
import app.common.enums.PatientStateEnum;
import app.model.datospaciente.ResumenPacienteModel;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;

/**
 * Diálogo para mostrar el resumen de un paciente, con la información más importante.
 *
 * @author Alberto Bausá Cano
 */
public class ResumenPacienteVC extends library.JIATabDialog {
    
    private final ResumenPacienteModel model;

    /**
     * Creates new form ResumenPacienteVC
     * 
     * @param resumenPacienteModel Modelo para el diálogo
     */
    public ResumenPacienteVC(ResumenPacienteModel resumenPacienteModel) {
        model = resumenPacienteModel;
        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lbSNStitle = new javax.swing.JLabel();
        lbSNScode = new javax.swing.JLabel();
        lbCompleteName = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        panelState = new javax.swing.JPanel();
        lbStateImage = new javax.swing.JLabel();
        panelTriaje = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setPreferredSize(new java.awt.Dimension(380, 300));
        setTabbedPane(jTabbedPane1);
        setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jPanel1.setPreferredSize(new java.awt.Dimension(250, 400));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        lbSNStitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbSNStitle.setForeground(new java.awt.Color(102, 0, 0));
        lbSNStitle.setText("Código SNS |");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 5);
        jPanel1.add(lbSNStitle, gridBagConstraints);

        lbSNScode.setText("900000002");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(lbSNScode, gridBagConstraints);

        lbCompleteName.setText("Apellidos, Nombre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 5, 20);
        jPanel1.add(lbCompleteName, gridBagConstraints);

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setMinimumSize(new java.awt.Dimension(230, 2));
        jSeparator1.setPreferredSize(new java.awt.Dimension(230, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
        jPanel1.add(jSeparator1, gridBagConstraints);

        panelState.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado"));
        panelState.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        panelState.add(lbStateImage, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 0);
        jPanel1.add(panelState, gridBagConstraints);

        panelTriaje.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Urgencia", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BOTTOM));
        panelTriaje.setLayout(new java.awt.GridBagLayout());

        jProgressBar1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jProgressBar1.setMaximum(10);
        jProgressBar1.setOrientation(1);
        jProgressBar1.setToolTipText("Nivel de prioridad de triaje");
        jProgressBar1.setPreferredSize(new java.awt.Dimension(23, 146));
        jProgressBar1.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 25, 10, 25);
        panelTriaje.add(jProgressBar1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel1.add(panelTriaje, gridBagConstraints);

        jTabbedPane1.addTab("Resumen", jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jTabbedPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public boolean validateThis() { return true; } // nada que validar

    @Override
    public void saveThis() { } // nada que guardar

    @Override
    public void cleanThis() { }

    @Override
    public void getExternVal(String id, Object value) {
        // si recibimos el código correcto, y el valor es un entero, aplicamos el cambio
        if(id.equals(DataBase.MessageCodes.ID_RESUMEN_SLIDER) && value instanceof Integer) {
            Integer val = (Integer) value;
            
            jProgressBar1.setValue(val);

            if(val >= 0 && val <= 3)
                jProgressBar1.setForeground(Color.GRAY);
            else if(val > 3 && val <= 5)
                jProgressBar1.setForeground(Color.GREEN);
            else if(val > 5 && val <= 7)
                jProgressBar1.setForeground(Color.ORANGE);
            else if(val > 7 && val <= 8)
                jProgressBar1.setForeground(Color.MAGENTA);
            else if(val > 8 && val < 11)
                jProgressBar1.setForeground(Color.RED);
            else
                jProgressBar1.setForeground(Color.BLACK);
        }
        // si recibimos el código correcto, y el valor es un PatientStateEnum, aplicamos el cambio
        else if(id.equals(DataBase.MessageCodes.ID_RESUMEN_STATE_IMAGE) && value instanceof PatientStateEnum) {
            lbStateImage.setIcon(new ImageIcon(getStateImagePath((PatientStateEnum) value)));
            lbStateImage.setToolTipText(((PatientStateEnum) value).name().toUpperCase());
        }
    }

    private void initData() {
        lbCompleteName.setText(getCompleteName());
        lbSNScode.setText(model.getDatosGenerales().getCodeSNS().toString());
        lbStateImage.setToolTipText(model.getDatosGenerales().getState() != null ?
                    model.getDatosGenerales().getState().name().toUpperCase() : "");
        lbStateImage.setIcon(new ImageIcon(getStateImagePath(model.getDatosGenerales().getState())));
        jProgressBar1.setValue(model.getDatosClinicos().getTriajePriority() != null ?
                                        model.getDatosClinicos().getTriajePriority() : 0);
        
        int progressBarValue = jProgressBar1.getValue();

        if(progressBarValue >= 0 && progressBarValue <= 3)
            jProgressBar1.setForeground(Color.GRAY);
        else if(progressBarValue > 3 && progressBarValue <= 5)
            jProgressBar1.setForeground(Color.GREEN);
        else if(progressBarValue > 5 && progressBarValue <= 7)
            jProgressBar1.setForeground(Color.ORANGE);
        else if(progressBarValue > 7 && progressBarValue <= 8)
            jProgressBar1.setForeground(Color.MAGENTA);
        else if(progressBarValue > 8 && progressBarValue < 11)
            jProgressBar1.setForeground(Color.RED);
        else
            jProgressBar1.setForeground(Color.BLACK);
    }
    
    public ResumenPacienteModel getModel() {
        return model;
    }
    
    public String getCompleteName() {
        return (model != null && model.getDatosGenerales() != null) ?
                model.getDatosGenerales().getSurname() + ", " + model.getDatosGenerales().getName() : "";
    }
    
    private String getStateImagePath(PatientStateEnum state) {
        File aux = new File("");
        String path = "";
        try { path = aux.getCanonicalPath() + "/src/images"; } catch (IOException ioe) { }
        
        if(!path.trim().isEmpty()) {
            switch(state) {
                case Registrado:
                    path += "/registrado.png";
                    break;
                case Espera:
                    path += "/espera.png";
                    break;
                case Ingreso:
                    path += "/ingreso.png";
                    break;
                case Alta:
                    path += "/alta.png"; }
        }
        
        return path;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbCompleteName;
    private javax.swing.JLabel lbSNScode;
    private javax.swing.JLabel lbSNStitle;
    private javax.swing.JLabel lbStateImage;
    private javax.swing.JPanel panelState;
    private javax.swing.JPanel panelTriaje;
    // End of variables declaration//GEN-END:variables
}
